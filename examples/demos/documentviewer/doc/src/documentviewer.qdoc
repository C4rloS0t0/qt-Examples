// Copyright (C) 2023 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \title Qt Demo - Document Viewer
    \ingroup mainwindow-classes
    \example demos/documentviewer
    \brief A Widgets application to display and print JSON, text, and PDF files.

    Demonstrates various features to use in widget applications:
    \list
    \li Using QSettings, query and save user preferences, manage file histories and
    \li Controllinh cursor behavior when hovering over widgets.
    \li Writing and dynamically loading plugins.
    \endlist

    \image documentviewer_open.png
    \meta {tag} {demo,widgets,mainwindow}

    \e{Document Viewer} demonstrates how to use a QMainWindow with static
    and dynamic tool bars, menus and actions.

    The MainWindow class provides a common application screen with general menus,
    actions and a tool bar. It provides functionality to open a file, determine the
    content type and keep a list of previously opened files. It stores information
    in QSettings and reads settings when launched.
    Depending on the opened file's content type, it creates a suitable viewer to
    display it and provide printing functionality.

    \section1 Creating an executable

    To create an executable, we use a standard main.cpp file.
    First, we set the application's organization name:

    \quotefromfile demos/documentviewer/app/main.cpp
    \skipto int main
    \printuntil QApplication::set
    \endsection1

    \section1 Creating an application and showing the main window

    \quotefromfile demos/documentviewer/app/main.cpp
    \skipto QApplication app
    \printuntil }
    \endsection1

    \section1 The MainWindow class

    The class constructor initializes the user interface created in Qt Designer.
    It links the actions for opening a file and the about dialog to their implementation.

    \quotefromfile demos/documentviewer/app/mainwindow.cpp
    \skipto ui->setupUi
    \printuntil triggered

    The \c mainwindow.ui file provides a QTabWidget on the left, where bookmarks and thumbnails
    can be displayed. It provides a QScrollArea on the right, where the viewed file contents are
    \printuntil showMenu);

    If a file is opened, the {File} class (inheriting from {QFile}) automatically determines
    the FileType used in this application. If no valid file type could be established, the user
    is asked, if it should be opened as plain text.

    The \c ViewerFactory class is used to manage file type specific viewers, implemented as plugins.
    When an instance of \c ViewerFactory is created, pointers to view area and QMainWindow have
    to be passed to the constructor.

    \code
    m_factory.reset(new ViewerFactory(ui->viewArea, this));
    \endcode

    \c ViewerFactory loads all available plugins when constructed. It provides public APIs to
    query about loaded plugins, their names, and supported mime types.

    \quotefromfile demos/documentviewer/app/viewerfactory.h
    \skipto ViewerList
    \printuntil QStringList supportedMimeTypes() const;


    The method \c viewer returns the pointer to the plugin suitable to open the QFile passed
    as an argument.

    \code
    m_viewer = m_factory->viewer(file);
    \endcode

    If the application settings contain a section for the viewer, it is passed to the viewer's
    virtual restoreState method. Afterwards, the standard UI assets are passed to the viewer
    and it's display widget is displayed in the main scroll area.

    \quotefromfile demos/documentviewer/app/mainwindow.cpp
    \skipuntil void MainWindow::openFile
    \skipto m_viewer->initViewer
    \printuntil }
    \endsection1

    \section1 The ViewerFactory class

    The only static method of the class takes a file, the widget where the viewed content is to be
    displayed, the main window and the user questions.
    Depending on the file's mime type, it creates an appropriate document viewer.

    \quotefromfile demos/documentviewer/app/mainwindow.cpp
    \skipto AbstractViewer
    \printuntil }
    \endsection1

    \section1 The AbstractViewer class

    The class provides a generalized API to view and browse through a document, save and print it.
    Properties of the document and the viewer itself can be queried: Does the document have content?
    Has it been modified? Is an overview (thumbnails or bookmarks) supported?
    The viewer's state can be saved to and restored from a QByteArray, which the application can
    access to store in its settings.

    AbstractViewer provides protected methods for classes inheriting from it, to create actions
    and menus on the main window. In order to display these assets on the main window, they are
    parented to it. AbstractViewer takes responsibility to remove and destroy the UI assets it
    created. It inherits from QObject to provide access to signals and slots.

    \section2 Signals


    \code
    void uiInitialized();
    \endcode

    The signal is emitted when AbstractViewer has received all necessary information about UI
    assets on the main window.

    \code
    void printingEnabledChanged(bool enabled);
    \endcode

    This signal is emitted when document printing has been enabled or disabled, e.g. because a new
    document has been successfully loaded or all content has been removed.

    \code
    void printStatusChanged(AbstractViewer::PrintStatus status);
    \endcode

    When printing has been started, this signal notifies about the printing progress.

    \code
    void documentLoaded(const QString &fileName);
    \endcode
    \endsection2

    The signal notifies the application that a document has been loaded successfully.
    \endsection1

    \section1 The TextViewer class

    A simple text viewer, inheriting from AbstractViewer.
    It features editing text files, copy/cut and paste, printing and saving changes.

    \section1 The JsonViewer class

    The plugin class displays a JSON file in a QTreeView.
    It loads a file into a QJsonDocument, used to populate a custom tree model with
    JsonItemModel.
    This part of the JSON viewer demonstrates, how to implement custom item models inheriting from
    QAbstractItemModel. The JsonTreeItem class provides basic API for manipulating JSON data
    and propagating it back to the underlying QJsonDocument.

    JsonViewer uses the toplevel objects as bookmarks for navigation. Other nodes (keys or
    values) can be added as additional bookmarks or removed from the bookmark list.
    A QLineEdit is used as a search field to navigate through the JSON tree.
    \endsection1

    \section1 The PdfViewer class
    This plugin is a fork of the QPdfViewerWidgets example.
    It demonstrates the use of QScroller to smoothly flick through the document.

    \section1 The TxtViewer class
    This plugin is a simple a text editor, to show how a user interface is written in pure C++.
    \endsection1

    \section1 Additional classes for application features

    \section2 The HoverWatcher class

    The class can be used to set override cursors when the mouse is hovering over a widget and
    to restore them upon departure.
    In order to prevent multiple HoverWatcher instances created for the same widget, it is
    implemented as a singleton per widget.

    HoverWatcher inherits from QObject and the QWidget watched becomes the instance's parent.
    An event filter is used to intercept the hover events without consuming them.

    \quotefromfile demos/documentviewer/plugins/pdfviewer/hoverwatcher.cpp
    \skipto HoverWatcher::HoverWatcher
    \printuntil }

    The actions watched are represented in an enum.

    \quotefromfile demos/documentviewer/plugins/pdfviewer/hoverwatcher.h
    \skipto enum HoverAction
    \printuntil };

    Static methods create watchers, check their existence for a specific QWidget or dismiss
    a watcher.

    \quotefromfile demos/documentviewer/plugins/pdfviewer/hoverwatcher.h
    \skipto static HoverWatcher
    \printuntil static void dismiss

    A cursor shape can be specified or unset for each HoverAction. If no cursor shape is
    specified for an action, the application's override cursor will be restored when it occurs.

    \quotefromfile demos/documentviewer/plugins/pdfviewer/hoverwatcher.h
    \skipto public slots
    \printuntil void unSetCursorShape

    The mouseButtons property specifies, which mouse buttons to consider for the MousePress action.

    \quotefromfile demos/documentviewer/plugins/pdfviewer/hoverwatcher.h
    \skipuntil public slots
    \skipto setMouseButtons
    \printuntil setMouseButton(

    Action specific signals are emitted when an action has been processed.

    \quotefromfile demos/documentviewer/plugins/pdfviewer/hoverwatcher.h
    \skipto signals
    \printuntil left();

    A general signal is emitted which passes the processed action as an argument.

    \code
    void hoverAction(HoverAction action);
    \endcode
    \endsection2

    \section2 The {RecentFiles} class

    The class is a QStringList, specialized to manage a list of recently opened files.

    \quotefromfile demos/documentviewer/app/recentfiles.cpp
    \skipto RecentFiles::RecentFiles
    \printuntil }

    It provides slots to add a single or multiple files, by passing their path or a list
    of paths as an argument. A file is added, if the path leads to a valid file.
    If a file already exists in the list of recent files, it is removed from its original position
    and added on the top.

    \quotefromfile demos/documentviewer/app/recentfiles.h
    \skipto public slots
    \printuntil addFiles

    Files can be removed by name or by index.

    \quotefromfile demos/documentviewer/app/recentfiles.h
    \skipuntil public slots
    \skipto removeFile
    \printuntil addFiles

    Slots are available to save and restore from {QSettings}.
    Files restored from settings are ignored, if they no longer exist.

    \quotefromfile demos/documentviewer/app/recentfiles.h
    \skipuntil public slots
    \skipto saveSettings
    \printuntil restoreFromSettings

    The maxFiles property manages the maximum amount of recent files to be remebered (default: 10).

    \code
    qsizetype maxFiles();
    void setMaxFiles(qsizetype maxFiles);
    \endcode

    {RecentFiles} verifies a file can be opened in {openMode}, before adding it.

    \code
    void setOpenMode(QIODevice::OpenMode mode);
    QIODevice::OpenMode openMode() const;
    \endcode
    \endsection2

    \section2 The {RecentFileMenu} class

    The {RecentFileMenu} class is a QMenu, specialized as a submenu to display a \l{RecentFiles}
    object as a submenu.

    Its constructor takes a parent widget, usually and QAction or a QMenu.
    Its fileOpened signal passes a QString argument with the absolute file name, when the
    application user has selected a recent file from the list.

    \note
    A {RecentFileMenu} is deleted either with its parent widget, or with the RecentFiles object
    passed to its constructor.

    \quotefromfile demos/documentviewer/app/recentfilemenu.h
    \skipuntil class RecentFileMenu
    \printuntil void fileOpened

    \endsection2
    \endsection1

*/
