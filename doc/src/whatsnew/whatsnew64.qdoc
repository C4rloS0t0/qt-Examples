// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \page whatsnew64.html
    \title What's New in Qt 6.4
    \brief Lists the new features in Qt 6.4.

    \section1 New and Restored Modules in Qt 6.4

    Qt 6.4 adds the following module:

    \list
        \li \l[QtHttpServer]{Qt HTTP Server} - A module for embedding an HTTP
            server into Qt applications. This module is in technical preview,
            API and ABI stability is not guaranteed.
        \li \l[QtQuick3DPhysics]{Qt Quick 3D Physics} - A high-level QML module adding physical simulation capabilities to Qt Quick 3D.
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    Qt 6.4 reintroduces the following modules that were not present in Qt 6.3.
    All listed modules were ported to Qt 6 and the CMake build system.

    A more detailed list of changes to each module can be found in
    \l {Changes to Qt Modules in Qt 6}.

    \list
        \li The {Qt TextToSpeech} module has been ported to Qt 6.
    \endlist

    \section1 New Features in Qt 6.4

    \section2 Qt Core Module

    \list
        \li Added QLatin1StringView as an alias for QLatin1String. This is
            now the recommended name for referring to a Latin-1 string view.
        \li The \c QLatin1StringView(const char *, qsizetype) and
            \c QLatin1StringView(const char *, const char *) constructors are
            made non-explicit.
        \li Added literal operator \c _L1 for creating Latin-1 string and char
            literals in the Qt::Literals::StringLiterals namespace.
        \li Added literal operators \c _s and \c _ba for creating QString and
            QByteArray literals respectively, in the Qt::Literals::StringLiterals
            namespace. Deprecated \c _qs and \c _qba in favor of \c _s and
            \c _ba.
        \li Deprecated QString::count() and QByteArray::count() that take no
            parameters, to avoid confusion with the algorithm overloads of the
            same name. They can be replaced by \c size() or \c length() methods.
        \li In the classes for Android and JNI development, QJniObject and QJniEnvironment,
            overloads have been added for \l{QJniObject::}{callMethod},
            \l{QJniEnvironment::}{findMethod} and similar methods. It is now possible to
            call Java functions and register native methods without specifying a signature
            string.
        \li The new template function \l{QJniObject::construct()} allows instantiating of a
            Java class from C++ without specifying a type or signature string.
    \endlist

    \section2 Qt GUI Module

    \list
        \li Added QTextDocumentFragment::toMarkdown(),
            QTextDocumentFragment::fromMarkdown(),
            and QTextCursor::insertMarkdown().
    \endlist

    \section2 Qt Quick Module

    \list
        \li Several new properties and functions has been added to TableView that improves
        support for keyboard navigation and selection, row- and column selections, animations,
        sub-cell positioning, and more.
        \li TreeView now support selections, and has gained a broader API for expanding
        and collapsing nodes in the tree recursively.

        \li QQuickWidget is now functional with all supported 3D graphics APIs (Vulkan,
            Metal, Direct3D 11) in addition to OpenGL. Applications no longer have to
            enforce rendering with OpenGL when using QQuickWidget.

        \li Added support for arrays of combined image samplers in shaders used with
            custom materials. This is supported by the new function
            QSGMaterialShader::combinedImageSamplerCount() and the enhanced semantics of
            the existing \c texture argument of QSGMaterialShader::updateSampledImage().

        \li Added support changing the polygon rasterization mode from \c solid to \c line
            in QSGMaterialShader::GraphicsPipelineState. (available only when the 3D API
            in use supports this)

        \li \l{QtQuick::ShaderEffectSource::format}{ShaderEffectSource.format} and
            \l{QtQuick::Item::layer.format}{layer.format} were not useful in previous Qt 6
            releases, with the legacy values ignored in practice. This is now documented
            and new, actually useful values are introduced, in particular to enable
            requesting floating point (FP16 or FP32) textures instead of RGBA8, if
            desired.

        \li Added QQuickRenderTarget::fromPaintDevice(), enabling redirecting the output
            from a QQuickWindow using the \c software backend as well.

        \li Added overloads in QQuickRenderTarget that enable specifying the native format
            of the texture or image object. This is relevant in some advanced use cases
            when one has to work with native textures that are not RGBA8. Note that only
            native formats that are supported by Qt's rendering infrastructure are
            accepted.

        \li Added
            \l{QQuickRenderTarget::setMirrorVertically()}{setMirrorVertically()}
            to QQuickRenderTarget, which allows requesting the Qt
            Quick renderer to alter its matrices to get vertically
            flipped results when redirecting the 3D API-based
            rendering into a texture.

        \li Qt Quick windows will now attempt to use the software rasterization platform
            of Direct 3D (WARP) in case the primary graphics device is not compatible with
            Qt, without having to resort to manually setting environment variables.

        \li Added simple heuristics to the \c threaded render loop of the Qt Quick
            scenegraph for recognizing broken vsync-based throttling. When frames are
            rendered/presented too fast, without blocking the render thread, it now
            switches automatically to the regular timer-based approach of running
            animations, thus preventing QML animations running too fast.

    \endlist

    \section2 Qt Quick Controls Module

    \list
        \li Added a new native-looking style for iOS, \l {iOS Style}, as Tech Preview.
        \li TreeViewDelegate has three new properties that describes if it's
        current, selected, or highlighted in the TreeView.
    \endlist

    \section2 Qt Widgets Module

    \list
        \li QFormLayout has new \l{QFormLayout::}{isRowVisible()} and \l{QFormLayout::}{setRowVisible()}
            member functions, with overloads that allow hiding and showing rows by index, input
            widget, or row layout.
        \li QKeySequenceEdit has a new  \l{QKeySequenceEdit::}{clearButtonEnabled} property. Use it to
            control whether the widget shows a clear button that allows the user to clear the edit.
        \li QWizard has a new slot, \l{QWizard::}{setCurrentId}, that allows applications to move to a
            page without without visiting the pages between the current page and the target.
    \endlist

    \section2 Qt Network Module

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Qt Test Module

    \list
        \li QTestEventLoop::enterLoopMSecs() now uses a PreciseTimer if the
            timeout is less than a second.
        \li Custom QTest::compare() implementations should now revise any calls
            to QTest::compare_helper() to use one of the two new overloads
            instead of the old one, which is now deprecated (so as to only
            generate the strings to represent values in a failure report if the
            check actually does fail).
        \li Added QAbstractItemModelTester::setUseFetchMore().
        \li New macros QCOMPARE_{EQ,NE,GT,GE,LT,LE}() support comparisons with
            reporting similar to that of QCOMPARE(). The EQ one does exact
            comparisons, without QCOMPARE()'s customizations. These also come
            with the usual QTRY_COMPARE_*() and QTRY_COMPARE_*_WITH_TIMEOUT()
            variants.
    \endlist

    \section2 Qt QML Module

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Qt Quick 3D Module

    \list

        \li Added a preview of lightmap baking support. This provides a static global
            illumination solution with lightmaps pre-generated using raytracing. See
            \l{Lightmaps and Global Illumination} for details.

        \li Added SpecularGlossyMaterial to enable using the specular/glossiness workflow
            instead of metalness/roughness.

        \li Added the \l{QtQuick3D::LineParticle3D}{LineParticle3D} type that allows
            creating line shaped sprite particles.

        \li Added the \l{QtQuick3D::Model::castsReflections}{Model.castsReflection}
            property to control if a model is rendered by reflection probes and if it can
            be seen in reflections. The same property is also introduced for
            \l{QQuick3DParticleSpriteParticle}{sprite particles}.

        \li Added the \l{QtQuick3D::ReflectionProbe::boxOffset}{ReflectionProbe.boxOffset}
            property to move the box relative to the position of the probe without affecting
            the position of the capture point.

        \li Added the \l{QtQuick3D::ReflectionProbe::debugView}{ReflectionProbe.debugView}
            property to display a cube visualizing the probe box.

        \li Added \l{QtQuick3D::Helpers::HeightFieldGeometry}{HeightFieldGeometry} to
            enable creating a height-field geometry from an image file.

        \li Added CubeMapTexture to enable custom materials and post-processing effects to
            work with cube map textures in the shaders. The input is either a \c{.ktx}
            container with image data for all 6 faces, or 6 individual image files.

        \li Added support for rendering a skybox from a cubemap instead of the light
            probe. This can be requested by setting the background mode
            \l{QtQuick3D::SceneEnvironment::SkyBoxCubeMap}{SceneEnvironment.SkyBoxCubeMap}.

        \li Added
            \l{QtQuick3D::Helpers::ProceduralSkyTextureData}{ProceduralSkyTextureData} to
            procedurally generate a HDR light probe or sky box texture.

        \li Improved shadow rendering for point and spot lights.

        \li Added the \l{QtQuick3D::View3D::renderFormat}{renderFormat} property to View3D
            to allow specifying the backing texture format when the View3D is using its
            (default) Offscreen render mode. The available values are the same as with
            \l{QtQuick::ShaderEffectSource::format}{ShaderEffectSource.format} (which
            itself is also revised in 6.4). This enables using floating point textures
            instead of the default RGBA8.

        \li Support for importing UIP files was removed. The mapping from old Qt 3D Studio
            features to Qt Quick 3D was problematic in previous releases
            already. Therefore, Qt 6.4 removes support for \c{.uip} files from the \c
            balsam tool.

    \endlist

    \section2 Qt Connectivity Module

    \list
        \li \l{QNdefMessage} is no longer exported. This class inherits
        \l{QList} publicly, but QList isn't designed to be inherited by
        an exported class.

        \warning This is not backward compatible, but this will prevent future
        BC breaks going forward.
    \endlist

    \section2 Qt Data Visualization Module

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Qt Charts Module

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section1 Platform Changes

    \section2 Technology Preview Platforms

    \section3 Windows on ARM

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Desktop Platforms

    \section3 \macos on Apple Silicon

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section3 Wayland Client on Linux

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Mobile Platforms

    \section3 Android

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section3 iOS

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Embedded Platforms

    Available under the \l {Qt for Device Creation} license.

    \section3 Boot to Qt

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section3 QNX

    \list
        \li Added support for \l{Qt Multimedia}.
    \endlist

    \section3 INTEGRITY

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section1 List of API Changes

    These pages contain an overview of API changes in Qt 6.4:
    \list
        \li \l {New Classes and Functions in Qt 6.4}
        \li \l {Obsolete Classes}
    \endlist

    \section1 Additions to Other Qt 6 Releases

    \list
        \li \l {What's New in Qt 6.3}
        \li \l {What's New in Qt 6.2}
        \li \l {What's New in Qt 6.1}
        \li \l {What's New in Qt 6.0}
    \endlist
*/

/*!
    \page newclasses64.html
    \title New Classes and Functions in Qt 6.4
    \brief A list of new APIs in Qt 6.4.

    This page contains a comprehensive list of all new classes and functions
    introduced in Qt 6.4. Links to new APIs in previous Qt 6 releases are found
    at the bottom of this page.

    \sincelist 6.4

    \section1 Additions to Other Qt 6 Releases

    \list
        \li \l {What's New in Qt 6.3}
        \li \l {What's New in Qt 6.2}
        \li \l {What's New in Qt 6.1}
        \li \l {What's New in Qt 6.0}
    \endlist
*/
