// Copyright (C) 2023 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \page whatsnew66.html
    \title What's New in Qt 6.6
    \brief Lists the new features in Qt 6.6.
    \ingroup whatsnewqt6

    \section1 New and Restored Modules in Qt 6.6

    Qt 6.6 adds the following modules and tools:

    \section2 New and Restored Modules in Technical Preview

    \note API and ABI stability is not guaranteed.

    \section2 Qt Graphs Module

    Qt Graphs is meant to be the replacement module for Qt Data Visualization. It uses
    Qt Quick 3D as the rendering engine to provide support for native graphics
    backends, instead of relying on OpenGL 2.1, like Qt Data Visualization does.

    The module will provide most, if not all of the functionality of Qt Data Visualization.
    Some advanced features may be incomplete in Technical Preview.

    \section1 New Features in Qt 6.6

    \section2 Qt Core Module

    \list
        \li Added Q_NODISCARD_CTOR macro that should be applied to mark
            constructors nodiscard. The macro resolves to \c{[[nodiscard]]}
            on compilers that support it, and does nothing on other compilers.
    \endlist

    \section2 Qt GUI Module

    \list
        \li Added QFont::setFeatures() for direct access to OpenType features in the font.

        \li The QRhi family of classes are now fully documented and offered as
        APIs with a limited compatibility promise. The Qt Rendering Hardware
        Interface is a 3D graphics API and shading language abstraction layer
        that is used by modules such as Qt Quick and Qt Quick 3D to implement
        cross-platform, portable rendering engines and material systems that can
        function on top of Direct 3D 11/12, Vulkan, Metal, OpenGL, and OpenGL
        ES. Applications that wish to perform their own low-level rendering
        without directly relying on potentially platform-specific 3D APIs and
        shading languages can now use QRhi and the related classes to augment a
        Qt Quick scene, render to a QWindow, perform offscreen rendering into a
        texture, or to dispatch GPU compute workloads. In previous Qt 6 releases
        the QRhi classes were fully private and the documentation was not
        provided as part of the standard Qt documentation set. Now they are
        treated similarly to the QPA (QPlatform*) classes, meaning they form a
        special set of classes that do not offer all the standard patterns and
        source/binary compatibility promises of public Qt APIs, but are
        nonetheless available for use by intermediate/advanced level application
        developers. The documentation for the QRhi APIs is now part of the
        standard Qt documentation. Also introduced the
        \l{RHI Window Example}{rhiwindow example}.

        \li Added a Direct 3D 12 backend for QRhi. This does not currently
        affect any applications because Qt Quick's and QQuickWidget's default
        backend choice continues to be Direct 3D 11 on Windows, and this is not
        expected to change in the foreseeable future either. The new D3D12
        backend should be considered experimental for the time being, and is
        useful primarily for applications that have a need to get Qt to perform
        its rendering via Direct 3D 12 in order to simplify interoperating with
        the application's own or some external component's rendering or compute
        engine requiring D3D12.
    \endlist

    \section2 Qt Location Module

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Qt Network Module

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Qt PDF Module

    \list
        \li The new QPdfLinkModel class provides the link geometry and destinations
            on a specified page.
        \li QPdfDocument::pageModel() implements Qt::DecorationRole to render
            page thumbnails on-demand.
        \li The new QPdfPageSelector class is a specialized QSpinBox for
            selecting a page in widget-based PDF viewers.
    \endlist

    \section2 Qt Positioning Module

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Qt QML Module

    \list
        \li Added support for managing \l{application permissions via QML}
        {QML Application Permissions}. The \l{Qt QML Core Types}{Qt QML Core}
        module exposes the Qt C++ \l [QtCore] {Application Permissions}
        functionality to QML via a set of permission types that can be used
        to check or request permission in a cross platform manner.
    \endlist

    \section2 Qt Quick Module

    \list
        \li Added \l {Text::}{font.features} property for direct access to
            OpenType features in the font.
        \li TableView has a \l {TableView::}{selectionMode} property to control whether
            single or multiple cells can be selected.
        \li TreeView has a \l {TreeView::}{rootIndex} property to show only a
            subtree from the model.
        \li AnimatedImage now supports the \l {AnimatedImage::}{sourceSize} property.
        \li The environment variable \c QT_QUICK_FLICKABLE_WHEEL_DECELERATION
            lets you customize the deceleration after scrolling with a "clicky"
            wheel mouse. By default, acceleration is now turned off so that
            scrolling distance is proportional to the number of "clicks"
            (unless the platform provides its own acceleration); but you can
            set a value less than 15000 to restore old behavior. The
            \l {Flickable::}{flickDeceleration} property now applies only to touch flicks.
        \li Most properties are now \l {Qt's Property System}{FINAL}, meaning that they
            can no longer be shadowed by declaring new properties with the same names.
            A warning will be emitted if a \c FINAL property is shadowed. We recommend
            that users rename such properties to avoid unexpected behavior changes.
        \li Added and exposed a number of QRhi-related functions in
            QQuickWindow, QQuickRenderControl, and QSGTexture. Querying the QRhi,
            QRhiSwapChain, or QRhiCommandBuffer used by the onscreen or offscreen Qt
            Quick rendering is now simplified. Some functions previously hidden from
            the documentation due to relying on QRhi* classes are made visible.
            Added
            \l{QQuickWindow::createTextureFromRhiTexture()}{createTextureFromRhiTexture()}
            to QQuickWindow serving as the counterpart of createTextureFromImage().
        \li Updated the scenegraph examples: added
            \l{Scene Graph - RHI Under QML}{rhiunderqml},
            replaced the legacy, OpenGL-only fboitem example with
            a new, portable \l{Scene Graph - RHI Texture Item}{rhitextureitem example},
            and updated the \l{Scene Graph - Custom QSGRenderNode}{customrendernode example}.
            These together demonstrate the three ways to extend a Qt Quick scene
            with custom low-level 2D/3D rendering (the three approaches being:
            underlay/overlay, custom item backed by rendering to a texture, custom
            item with QSGRenderNode).
    \endlist

    \section2 Qt Quick Controls Module

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Qt Quick Layouts Module
    \list
        \li Added LayoutItemProxy, a helper item for writing responsive layouts (in Technical Preview)
        \li Added \l {RowLayout::}{uniformCellSizes}, {ColumnLayout::}{uniformCellSizes},
            \l {GridLayout::}{uniformCellWidths} and \l {GridLayout::}{uniformCellHeights} properties
            as applicable to each type of \l {Qt Quick Layouts}{Layout} (in Technical Preview)
        \li StackLayout will now update \l {StackLayout::}{currentIndex} if an Item
            is inserted or removed at an index less than or equal to the current index.
    \endlist

    \section2 Qt Quick 3D Module

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Qt Serial Bus Module

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Qt Sql Module

    \list
        \li A plugin for \l {https://www.mimer.com/} {Mimer SQL} was added
        \li MySQL/MariaDB gained the new connect options MYSQL_OPT_PROTOCOL,
        MYSQL_SHARED_MEMORY_BASE_NAME, MYSQL_OPT_TLS_VERSION, MYSQL_OPT_SSL_MODE
        \li The ODBC plugin now returns all native error codes in QSqlError
        \li QSqlQuery got two new functions boundValueName()/boundValueNames()
    \endlist

    \section2 Qt Test Module

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Qt TextToSpeech Module

    The QTextToSpeech class learned a few more tricks that are available with all
    engines:

    \list
        \li Applications can add multiple chunks of text to a synthesizing engine
            via \l{QTextToSpeech::}{enqueue}.
        \li The new \l{QTextToSpeech::}{aboutToSynthesize} signal gets emitted just
            before a chunk of text gets synthesized.
        \li Selecting one of the voices provided by the engine using a set of
            criteria is now easy with the \l{QTextToSpeech::}{findVoices} member
            function. QML code can in addition use the \l{VoiceSelector} type as an
            attached property.
    \endlist

    Not all new features are available with every engine. Applications can use the
    new \l{QTextToSpeech::}{Capabilities} flag and \l{QTextToSpeech::}{engineCapabilities}
    property to check which of the following new features the currently used engine
    supports:

    \list
        \li If the engine has the \l{QTextToSpeech::Capabilities}{Synthesize}
            capability, QTextToSpeech can now synthesize text into PCM data. The
            \l{QTextToSpeech::}{synthesize} function can be used with a callable that
            receives chunks of PCM data when it has been synthesized.
        \li If the engine has the \l{QTextToSpeech::Capabilities}{WordByWordProgress}
            capability, QTextToSpeech emits the \l{QTextToSpeech::}{sayingWord} signal
            for each word in the current chunk of text as it gets spoken.
    \endlist

    \section2 Qt WebEngine Module

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Qt WebView Module

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Qt Widgets Module

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section1 Platform Changes

    \section2 Desktop Platforms

    \section3 Windows

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section3 \macos

    \list
        \li QMessageBox::setCheckBox() is now respected when using native
            message boxes.
    \endlist

    \section3 X11

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section2 Mobile Platforms

    \section3 Android

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section3 iOS

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist

    \section1 List of API Changes

    \list
        \li Nothing to see here. //! TODO Clean this up before release.
    \endlist
*/

/*!
    \page newclasses66.html
    \title New Classes and Functions in Qt 6.6
    \brief A list of new APIs in Qt 6.6.
    \ingroup whatsnewqt6

    This page contains a comprehensive list of all new classes and functions
    introduced in Qt 6.6.

    \sincelist 6.6
*/
